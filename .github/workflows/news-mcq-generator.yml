name: MCQ Generator
on:
  schedule:
    # Run every 6 hours to maximize processing time per run
    - cron: '0 */7 * * *'
  workflow_dispatch: # Allow manual triggering
  push:
    branches: [ main ]
    paths: [ 'mcq_generator.py' ] # Only run when the MCQ script changes

jobs:
  generate-mcqs:
    runs-on: ubuntu-latest
    timeout-minutes: 350 # Use almost the full 6-hour GitHub Actions limit
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
        
    - name: Pull latest changes
      run: |
        echo "Pulling latest changes before starting..."
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action Bot"
        git pull origin main --rebase || git pull origin main --no-rebase || echo "Pull failed, continuing..."
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake
        
    - name: Install Python dependencies
      run: |
        pip3 install --upgrade pip
        pip3 install llama-cpp-python
        pip3 install huggingface-hub
        
    - name: Create directories
      run: |
        mkdir -p models
        mkdir -p articles
        
    - name: Check for cached model
      id: cache-model
      uses: actions/cache@v4
      with:
        path: models/mistral-7b-instruct-v0.1.Q4_K_M.gguf
        key: mistral-model-v1
        restore-keys: |
          mistral-model-
          
    - name: Download Mistral model
      if: steps.cache-model.outputs.cache-hit != 'true'
      run: |
        cd models
        huggingface-cli download TheBloke/Mistral-7B-Instruct-v0.1-GGUF mistral-7b-instruct-v0.1.Q4_K_M.gguf --local-dir . --local-dir-use-symlinks False
      env:
        HF_HUB_DISABLE_PROGRESS_BARS: 1
        
    - name: Verify model download
      run: |
        ls -la models/
        if [ ! -f "models/mistral-7b-instruct-v0.1.Q4_K_M.gguf" ]; then
          echo "Model file not found!"
          exit 1
        fi
        echo "Model size: $(ls -lh models/mistral-7b-instruct-v0.1.Q4_K_M.gguf | awk '{print $5}')"
        
    - name: Check for articles to process
      id: check-articles
      run: |
        # Create empty file if it doesn't exist
        if [ ! -f "articles/news_articles.txt" ]; then
          echo "Creating empty articles file..."
          touch articles/news_articles.txt
        fi
        
        # Check if file has content
        if [ ! -s "articles/news_articles.txt" ]; then
          echo "Articles file is empty. Nothing to process."
          echo "has_articles=false" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # Count articles
        article_count=$(grep -c "^Link: " articles/news_articles.txt || echo "0")
        echo "Found $article_count articles to process"
        echo "has_articles=true" >> $GITHUB_OUTPUT
        echo "article_count=$article_count" >> $GITHUB_OUTPUT
        
        if [ "$article_count" -eq "0" ]; then
          echo "No articles to process."
          echo "has_articles=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Show current articles status
      if: steps.check-articles.outputs.has_articles == 'true'
      run: |
        echo "=== BEFORE PROCESSING ==="
        echo "üì∞ Total articles in input file: $(grep -c '^Link: ' articles/news_articles.txt || echo '0')"
        echo "üìù Current quiz file size: $(wc -l < quiz.txt 2>/dev/null || echo '0') lines"
        echo "üîç First few links to be processed:"
        grep "^Link: " articles/news_articles.txt | head -5
        
    - name: Run MCQ generator
      if: steps.check-articles.outputs.has_articles == 'true'
      run: |
        echo "Starting MCQ generation at $(date)"
        timeout 340m python3 mcq_generator.py || {
          echo "MCQ generation completed/timed out at $(date)"
        }
        echo "MCQ generation completed at $(date)"
      env:
        MODEL_PATH: ./models/mistral-7b-instruct-v0.1.Q4_K_M.gguf
        INPUT_FILE: ./articles/news_articles.txt
        
    - name: Check generated output
      if: steps.check-articles.outputs.has_articles == 'true'
      run: |
        echo "=== AFTER PROCESSING ==="
        
        if [ -f "quiz.txt" ]; then
          quiz_lines=$(wc -l < quiz.txt)
          quiz_size=$(ls -lh quiz.txt | awk '{print $5}')
          echo "üìù Quiz file: $quiz_lines lines, $quiz_size"
          
          # Count generated questions
          question_count=$(grep -c "^Q[0-9]\." quiz.txt || echo "0")
          echo "‚ùì Total questions generated: $question_count"
          
          echo "üìã Last few lines of quiz file:"
          tail -10 quiz.txt
        else
          echo "‚ùå No quiz file generated"
        fi
        
        echo ""
        if [ -f "articles/news_articles.txt" ]; then
          remaining_articles=$(grep -c "^Link: " articles/news_articles.txt || echo "0")
          echo "üì∞ Remaining articles: $remaining_articles"
          
          if [ "$remaining_articles" -gt "0" ]; then
            echo "üîç Next articles to process:"
            grep "^Link: " articles/news_articles.txt | head -3
          fi
        else
          echo "üì∞ No articles file remaining"
        fi
        
    - name: Commit and push changes
      if: steps.check-articles.outputs.has_articles == 'true'
      run: |
        echo "Checking for changes to commit..."
        
        # Pull latest changes first to avoid conflicts
        git pull origin main --rebase || {
          echo "‚ö†Ô∏è Rebase failed, trying merge strategy..."
          git pull origin main --no-rebase || {
            echo "‚ùå Pull failed, but continuing to try push..."
          }
        }
        
        # Add files that may have changed
        git add articles/news_articles.txt quiz.txt 2>/dev/null || true
        
        if git diff --staged --quiet; then
          echo "üìù No changes to commit"
        else
          # Create a descriptive commit message
          if [ -f "quiz.txt" ]; then
            question_count=$(grep -c "^Q[0-9]\." quiz.txt || echo "0")
          else
            question_count="0"
          fi
          
          remaining_articles=$(grep -c "^Link: " articles/news_articles.txt 2>/dev/null || echo "0")
          processed_articles=$((${GITHUB_RUN_NUMBER:-0} * 20)) # Rough estimate
          
          git commit -m "ü§ñ MCQ Generation Run #${GITHUB_RUN_NUMBER:-0} - $question_count questions, $remaining_articles articles remaining [$(date '+%Y-%m-%d %H:%M UTC')]"
          
          # Try to push, with retry logic
          for i in {1..3}; do
            if git push; then
              echo "‚úÖ Changes committed and pushed successfully"
              break
            else
              echo "‚ö†Ô∏è Push attempt $i failed, pulling latest changes and retrying..."
              git pull origin main --rebase || git pull origin main --no-rebase
              if [ $i -eq 3 ]; then
                echo "‚ùå Failed to push after 3 attempts"
                exit 1
              fi
              sleep 5
            fi
          done
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: mcq-generation-${{ github.run_number }}
        path: |
          articles/
          quiz.txt
        retention-days: 7
        
    - name: Run summary
      if: always()
      run: |
        echo "=== RUN SUMMARY ==="
        echo "üöÄ Workflow: ${{ github.workflow }}"
        echo "üìÖ Run: ${{ github.run_number }}"
        echo "‚è∞ Completed: $(date)"
        
        if [ -f "quiz.txt" ]; then
          total_questions=$(grep -c "^Q[0-9]\." quiz.txt || echo "0")
          echo "‚úÖ Total questions in quiz file: $total_questions"
        fi
        
        if [ -f "articles/news_articles.txt" ]; then
          remaining=$(grep -c "^Link: " articles/news_articles.txt || echo "0")
          echo "üì∞ Articles remaining: $remaining"
          
          if [ "$remaining" -gt "0" ]; then
            echo "üí° Next run will process more articles"
          else
            echo "üéâ All articles have been processed!"
          fi
        fi
        
    - name: Clean up large files
      run: |
        # Clean up the model file to save space (it will be cached)
        rm -rf models/
      if: always()